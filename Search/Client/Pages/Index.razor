@page "/"
@inject ClientSearchService service

<PageTitle>Search</PageTitle>

<h1>Search</h1>

<p>This component demonstrates fetching data from the server.</p>

<EditForm Model="search" OnValidSubmit="HandleValidSubmit">
    <div class="search-container">
        <div class="search-feature d-flex">
            <div class="search-bar">
                <input type="search" id="search-query" class="form-control" placeholder="Søg..."
                    @bind-value="search!.Query" />
                <ValidationMessage For="() => search.Query" />
            </div>
            <div class="search-button">
                <button type="submit" class="btn btn-primary" disabled="@isLoading">
                    Søg
                </button>
            </div>
        </div>
    </div>
    <div class="search-settings d-flex flex-column">
        <div>
            <label for="search-case-sensitive">Case-sensitivity</label>
            <input type="checkbox" id="search-case-sensitive" checked @bind-value="search!.Settings.CaseSensitive" />
        </div>
        <div>
            <label for="search-show-results">Vis antal hits</label>
            <input type="number" id="search-show-results" placeholder=@search!.Settings.ResultLimit
                @bind-value="search!.Settings.ResultLimit" />
        </div>
    </div>
</EditForm>

@if (search!.Result is not null)
{
    <p>Hits: @search.Result.Hits</p>
    <table class="table">
        <thead>
            <tr>
                <th>URL</th>
                <th>Index time</th>
                <th>Creation time</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var doc in search.Result.DocumentHits)
            {
                <tr @key="doc.Document.mUrl">
                    <td>@doc.Document.mUrl</td>
                    <td>@doc.Document.mIdxTime</td>
                    <td>@doc.Document.mCreationTime</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    public Search search = new() { Settings = new SearchSettings() };
    private bool isLoading = false;

    private async Task HandleValidSubmit()
    {
        if (!string.IsNullOrWhiteSpace(search.Query))
        {
            isLoading = true;
            search.Result = await service.GetSearchResult(search);
            isLoading = false;
        }
    }
}
